// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.21.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `transportinstruction.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:TransportBuffers.Instruction)
pub struct Instruction {
    // message fields
    // @@protoc_insertion_point(field:TransportBuffers.Instruction.protocol_version)
    pub protocol_version: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:TransportBuffers.Instruction.old_num)
    pub old_num: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:TransportBuffers.Instruction.new_num)
    pub new_num: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:TransportBuffers.Instruction.ack_num)
    pub ack_num: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:TransportBuffers.Instruction.throwaway_num)
    pub throwaway_num: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:TransportBuffers.Instruction.diff)
    pub diff: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:TransportBuffers.Instruction.chaff)
    pub chaff: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:TransportBuffers.Instruction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Instruction {
    fn default() -> &'a Instruction {
        <Instruction as ::protobuf::Message>::default_instance()
    }
}

impl Instruction {
    pub fn new() -> Instruction {
        ::std::default::Default::default()
    }

    // optional uint32 protocol_version = 1;

    pub fn protocol_version(&self) -> u32 {
        self.protocol_version.unwrap_or(0)
    }

    pub fn clear_protocol_version(&mut self) {
        self.protocol_version = ::std::option::Option::None;
    }

    pub fn has_protocol_version(&self) -> bool {
        self.protocol_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protocol_version(&mut self, v: u32) {
        self.protocol_version = ::std::option::Option::Some(v);
    }

    // optional uint64 old_num = 2;

    pub fn old_num(&self) -> u64 {
        self.old_num.unwrap_or(0)
    }

    pub fn clear_old_num(&mut self) {
        self.old_num = ::std::option::Option::None;
    }

    pub fn has_old_num(&self) -> bool {
        self.old_num.is_some()
    }

    // Param is passed by value, moved
    pub fn set_old_num(&mut self, v: u64) {
        self.old_num = ::std::option::Option::Some(v);
    }

    // optional uint64 new_num = 3;

    pub fn new_num(&self) -> u64 {
        self.new_num.unwrap_or(0)
    }

    pub fn clear_new_num(&mut self) {
        self.new_num = ::std::option::Option::None;
    }

    pub fn has_new_num(&self) -> bool {
        self.new_num.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_num(&mut self, v: u64) {
        self.new_num = ::std::option::Option::Some(v);
    }

    // optional uint64 ack_num = 4;

    pub fn ack_num(&self) -> u64 {
        self.ack_num.unwrap_or(0)
    }

    pub fn clear_ack_num(&mut self) {
        self.ack_num = ::std::option::Option::None;
    }

    pub fn has_ack_num(&self) -> bool {
        self.ack_num.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ack_num(&mut self, v: u64) {
        self.ack_num = ::std::option::Option::Some(v);
    }

    // optional uint64 throwaway_num = 5;

    pub fn throwaway_num(&self) -> u64 {
        self.throwaway_num.unwrap_or(0)
    }

    pub fn clear_throwaway_num(&mut self) {
        self.throwaway_num = ::std::option::Option::None;
    }

    pub fn has_throwaway_num(&self) -> bool {
        self.throwaway_num.is_some()
    }

    // Param is passed by value, moved
    pub fn set_throwaway_num(&mut self, v: u64) {
        self.throwaway_num = ::std::option::Option::Some(v);
    }

    // optional bytes diff = 6;

    pub fn diff(&self) -> &[u8] {
        match self.diff.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_diff(&mut self) {
        self.diff = ::std::option::Option::None;
    }

    pub fn has_diff(&self) -> bool {
        self.diff.is_some()
    }

    // Param is passed by value, moved
    pub fn set_diff(&mut self, v: ::std::vec::Vec<u8>) {
        self.diff = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_diff(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.diff.is_none() {
            self.diff = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.diff.as_mut().unwrap()
    }

    // Take field
    pub fn take_diff(&mut self) -> ::std::vec::Vec<u8> {
        self.diff.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes chaff = 7;

    pub fn chaff(&self) -> &[u8] {
        match self.chaff.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_chaff(&mut self) {
        self.chaff = ::std::option::Option::None;
    }

    pub fn has_chaff(&self) -> bool {
        self.chaff.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chaff(&mut self, v: ::std::vec::Vec<u8>) {
        self.chaff = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chaff(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.chaff.is_none() {
            self.chaff = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.chaff.as_mut().unwrap()
    }

    // Take field
    pub fn take_chaff(&mut self) -> ::std::vec::Vec<u8> {
        self.chaff.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Instruction {
    const NAME: &'static str = "Instruction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.protocol_version = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.old_num = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.new_num = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.ack_num = ::std::option::Option::Some(is.read_uint64()?);
                },
                40 => {
                    self.throwaway_num = ::std::option::Option::Some(is.read_uint64()?);
                },
                50 => {
                    self.diff = ::std::option::Option::Some(is.read_bytes()?);
                },
                58 => {
                    self.chaff = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.protocol_version {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.old_num {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.new_num {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.ack_num {
            my_size += ::protobuf::rt::uint64_size(4, v);
        }
        if let Some(v) = self.throwaway_num {
            my_size += ::protobuf::rt::uint64_size(5, v);
        }
        if let Some(v) = self.diff.as_ref() {
            my_size += ::protobuf::rt::bytes_size(6, &v);
        }
        if let Some(v) = self.chaff.as_ref() {
            my_size += ::protobuf::rt::bytes_size(7, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.protocol_version {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.old_num {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.new_num {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.ack_num {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.throwaway_num {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.diff.as_ref() {
            os.write_bytes(6, v)?;
        }
        if let Some(v) = self.chaff.as_ref() {
            os.write_bytes(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Instruction {
        Instruction::new()
    }

    fn clear(&mut self) {
        self.protocol_version = ::std::option::Option::None;
        self.old_num = ::std::option::Option::None;
        self.new_num = ::std::option::Option::None;
        self.ack_num = ::std::option::Option::None;
        self.throwaway_num = ::std::option::Option::None;
        self.diff = ::std::option::Option::None;
        self.chaff = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Instruction {
        static instance: Instruction = Instruction {
            protocol_version: ::std::option::Option::None,
            old_num: ::std::option::Option::None,
            new_num: ::std::option::Option::None,
            ack_num: ::std::option::Option::None,
            throwaway_num: ::std::option::Option::None,
            diff: ::std::option::Option::None,
            chaff: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}
